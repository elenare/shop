{
    // https://github.com/jscs-dev/node-jscs
    // http://catatron.com/node-jscs/rules

    "excludeFiles": [
        "src/main/webapp/contracts/shop/js/1_0/*.min.js",
        "src/main/webapp/artikelverwaltung/*.min.js",
        "src/main/webapp/bestellverwaltung/*.min.js",
        "src/main/webapp/kundenverwaltung/*.min.js",
        "src/main/webapp/shared/*.min.js"
    ],

    "requireCurlyBraces": [
        "if",
        "else",
        "for",
        "while",
        "do",
        "try",
        "catch"
    ],

    "requireSpaceAfterKeywords": [
        "if",
        "else",
        "for",
        "while",
        "do",
        "switch",
        "return",
        "try",
        "catch"
    ],

    "requireSpaceBeforeBinaryOperators": [
        "=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=",
        "&=", "|=", "^=", "+=",

        "+", "-", "*", "/", "%", "<<", ">>", ">>>", "&",
        "|", "^", "&&", "||", "===", "==", ">=",
        "<=", "<", ">", "!=", "!=="
    ],

    // Operatoren am Zeilenende verbieten
    //"disallowOperatorBeforeLineBreak": ["+", ".", "?", ":"],

    // CamelCase oder Grossbuchstaben (mit Underscore) bei Konstanten
    "requireCamelCaseOrUpperCaseIdentifiers": true,

    "maximumLineLength": {
        "value": 120,
        "allowComments": true,
        "allowRegex": true
    },

    // Einruecken von Bloecken und bei switch
    "validateIndentation": 4,

    // Doppelte Hochkommata, keine einfachen
    "validateQuoteMarks": "\"",

    // String-Konkatenation mit +, falls sich ein String ueber mehrere Zeilen erstreckt
    "disallowMultipleLineStrings": true,

    // Kein Mix aus Leerzeichen und Tabs
    "disallowMixedSpacesAndTabs": true,

    // Keine Leerzeichen am Zeilenende
    "disallowTrailingWhitespace": true,

    // Kein Leerzeichen bei z.B. ++x
    "disallowSpaceAfterPrefixUnaryOperators": true,

    // Mehrere Variable in 1 var-Deklarationen zusammenfassen
    "requireMultipleVarDecl": true,

    // Leerzeichen nach Binaeroperatore, z.B. +
    "requireSpaceAfterBinaryOperators": true,

    // Leerzeichen vor und nach ? sowie :
    "requireSpacesInConditionalExpression": true,

    // Leerzeichen vor { bei z.B. if-Anweisungen, for-Schleifen, ...
    "requireSpaceBeforeBlockStatements": true,

    // Neue Zeile bei Schluesselwoerter (Ausnahmen: else, catch)
    "disallowKeywordsOnNewLine": ["else", "catch"],

    // Leerzeichen am Dateiende
    "requireLineFeedAtFileEnd": true,

    // Keine Leerzeichen bei JSON-Objekten nach { und vor } -- ausser beim Schliessen von geschachtelten Klammern
    "disallowSpacesInsideObjectBrackets": "all",

    // Keine Leerzeichen bei JSON-Arrays nach [ und vor ] -- ausser beim Schliessen von geschachtelten Klammern
    "disallowSpacesInsideArrayBrackets": "all",

    // Keine Leerzeichen innerhalb von runden Klammern
    "disallowSpacesInsideParentheses": true,

    "validateJSDoc": {
        "checkParamNames": true,
        "requireParamTypes": true
    },

    // max. 1 Leerzeile
    "disallowMultipleLineBreaks": true,

    // Komma am Zeilenende und nicht am Zeilenanfang
    "requireCommaBeforeLineBreak": true,

    // Kein _ als 1. Zeichen eines Namens (Vordefinierte Ausnahmen: __proto__, _ (lodash), Node.js
    "disallowDanglingUnderscores": true,

    // Keine leeren Bloecke {} 
    "disallowEmptyBlocks": true,

    // Kein Komma vor } oder ]
    "disallowTrailingComma": true,

    // Grossschreibung von Konstruktoren
    "requireCapitalizedConstructors": null,

    // x.y statt x['y']
    "requireDotNotation": null,

    // Klammerung von IIFE (= immediately invoked function expressions)
    "requireParenthesesAroundIIFE": true,

    // ES 6 zulassen
    "esnext": true
}